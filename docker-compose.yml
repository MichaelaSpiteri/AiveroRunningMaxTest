version: '3'

services:
  rabbitmq:
    container_name: rabbitmq_broker
    image: 'rabbitmq:3.6-management-alpine'
    ports:
      # The standard AMQP protocol port
      - '5672:5672'
      # HTTP management UI
      - '15672:15672'
    environment:
      # The location of the RabbitMQ server.  "amqp" is the protocol;
      # "rabbitmq" is the hostname.  Note that there is not a guarantee
      # that the server will start first!  Telling the pika client library
      # to try multiple times gets around this ordering issue.
      AMQP_URL: 'amqp://rabbitmq?connection_attempts=5&retry_delay=5'
      RABBITMQ_DEFAULT_USER: "guest"
      RABBITMQ_DEFAULT_PASS: "guest"
      

  random_number_generator:
    image: registry.gitlab.com/aivero/public/programming-exercise/rand-num:master
    container_name: rand_gen
    network_mode: host
    environment:
      - NUMBER_OF_MESSAGES=10000
      - WAIT_MILLIES=0
      - AMQP_URL='amqp://rabbitmq?connection_attempts=5&retry_delay=5'
    depends_on:
      - rabbitmq
  
  validator:
    build: ./validator
    container_name: validator
    restart: unless-stopped
    network_mode: host
    environment:
      RESULT_FILE_PATH: /results/results.csv
      QUEUE_NAME: solution
    depends_on:
      - rabbitmq
    volumes:
    - ./results:/results:rw

networks:
  # Declare our private network.  We must declare one for the magic
  # Docker DNS to work, but otherwise its default settings are fine.
  network: {}